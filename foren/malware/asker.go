package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

func main() {
	questions := []string{
		"What is the malicious file's name?",
		"What is its absolute path?",
		"What is its PID?",
		"What is its PPID?",
		"Who is the user that launched the malware? Format: COMPUTERNAME\\USERNAME",
		"At what time was it executed? Format xx:xx:xx",
		"At what time did it finish the execution? Format xx:xx:xx",
		"How many threads does the malware create?",
		"What is the first operation the malware executes?",
		"What is the absolute path of the directory in question? Just the first directory created.",
		"For persistence, the malware is modifying the Windows Registry. What is the hive that is being manipulated?",
		"What is the operation performed to modify the registry? (Case-Sensitive)",
		"What is the legit service that the malware is trying to mimic? Format: xxxxxx xxxxxx (Case-Sensitive)",
		"What is the type of data that is being written to the Registry key? Format xxx_xx (Case-Sensitive)",
		"What is the operation name performed to use that? (Case-Sensitive)",
		"What is the desired access field in order to delete the file? (Case-Sensitive)",
		"What is operation performed to quit the process? Format xxxxxxx xxxx (Case-Sensitive)",
	}

	answers := []string{
		"invoice_2318362983713_823931342io.pdf.exe",
		"C:/Users/salamanki/Desktop/theZoo/malware/Binaries/ZeusBankingVersion_26Nov2013/invoice_2318362983713_823931342io.pdf.exe",
		"5428",
		"3252",
		"DESKTOP-BQH2KHK/salamanki",
		"23:21:27",
		"23:21:34",
		"6",
		"Process Start",
		"C:/Users/salamanki/AppData/Local/Google/Desktop",
		"HKCU",
		"RegSetValue",
		"Google Update",
		"reg_sz",
		"CreateFile",
		"Delete",
		"Process Exit",
	}

	reader := bufio.NewReader(os.Stdin)

	for i := 0; i < len(questions); i++ {
		fmt.Println("---")
		fmt.Printf("Question %d: %s\n", i+1, questions[i])
		for {
			fmt.Print("Answer: ")
			input, err := reader.ReadString('\n')
			if err != nil {
				fmt.Println("Error reading input, try again.")
				continue
			}
			input = strings.TrimSpace(input)
			if input == answers[i] {
				fmt.Println("Correct answer!")
				break
			} else {
				fmt.Println("Incorrect. Try again.")
			}
		}
	}

	flag, err := os.ReadFile("flag.txt")
	if err != nil {
		fmt.Println("Error reading flag.txt:", err)
		return
	}

	fmt.Println("\nCongratulations! Here's your flag:")
	fmt.Println(string(flag))
}
